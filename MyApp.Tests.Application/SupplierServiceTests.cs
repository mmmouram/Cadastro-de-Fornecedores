using Xunit;\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing MyApp.Infrastructure.Data;\nusing MyApp.Infrastructure.Repositories;\nusing MyApp.Application.Services;\nusing MyApp.Application.Interfaces;\nusing MyApp.Domain.Enums;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace MyApp.Tests.Application\n{\n    public class SupplierServiceTests\n    {\n        private ISupplierService GetService(out ApplicationDbContext context)\n        {\n            var options = new DbContextOptionsBuilder<ApplicationDbContext>()\n                .UseInMemoryDatabase(Guid.NewGuid().ToString())\n                .Options;\n\n            context = new ApplicationDbContext(options);\n            var repository = new SupplierRepository(context);\n            return new SupplierService(repository);\n        }\n\n        [Fact]\n        public async Task Create_NumericCnpj_Success()\n        {\n            var service = GetService(out _);\n            var result = await service.CreateAsync("12345678000195", PersonType.JURIDICA);\n            Assert.Equal("12345678000195", result.Cnpj);\n        }\n\n        [Fact]\n        public async Task Create_AlphaNumericCnpj_Success()\n        {\n            var service = GetService(out _);\n            var result = await service.CreateAsync("1A3456780001B5", PersonType.JURIDICA);\n            Assert.Equal("1A3456780001B5", result.Cnpj);\n        }\n\n        [Fact]\n        public async Task Create_InvalidFormat_ThrowsValidationException()\n        {\n            var service = GetService(out _);\n            await Assert.ThrowsAsync<ValidationException>(() =>\n                service.CreateAsync("12#45678!000195", PersonType.JURIDICA));\n        }\n\n        [Fact]\n        public async Task Create_InvalidDv_ThrowsValidationException()\n        {\n            var service = GetService(out _);\n            await Assert.ThrowsAsync<ValidationException>(() =>\n                service.CreateAsync("1A3456780001B4", PersonType.JURIDICA));\n        }\n\n        [Fact]\n        public async Task Create_CnpjAlphanumeric_Mei_ThrowsValidationException()\n        {\n            var service = GetService(out _);\n            await Assert.ThrowsAsync<ValidationException>(() =>\n                service.CreateAsync("1A3456780001B5", PersonType.MEI));\n        }\n\n        [Fact]\n        public async Task GetById_ExistingSupplier_ReturnsDto()\n        {\n            var service = GetService(out var context);\n            var created = await service.CreateAsync("12345678000195", PersonType.JURIDICA);\n            var dto = await service.GetByIdAsync(created.Id);\n            Assert.NotNull(dto);\n            Assert.Equal(created.Id, dto.Id);\n            Assert.Equal("12345678000195", dto.Cnpj);\n        }\n    }\n}\n