using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nnamespace MyApp.Domain.ValueObjects\n{\n    public class Cnpj\n    {\n        private const int Length = 14;\n        public string Value { get; private set; }\n        public bool IsValid { get; private set; }\n        public bool IsNumeric { get; private set; }\n        public string ValidationErrorMessage { get; private set; }\n\n        public Cnpj(string value)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n            {\n                IsValid = false;\n                ValidationErrorMessage = "Formato de CNPJ inválido";\n                return;\n            }\n\n            value = value.Trim().ToUpperInvariant();\n\n            if (value.Length != Length || !Regex.IsMatch(value, "^[0-9A-Z]{14}$"))\n            {\n                IsValid = false;\n                ValidationErrorMessage = "Formato de CNPJ inválido";\n                return;\n            }\n\n            IsNumeric = Regex.IsMatch(value, "^[0-9]{14}$");\n\n            var digits = new List<int>();\n            foreach (var ch in value)\n            {\n                if (char.IsDigit(ch))\n                {\n                    digits.Add(ch - '0');\n                }\n                else\n                {\n                    digits.Add(ch - 48);\n                }\n            }\n\n            int firstDv = CalculateDv(digits.Take(12));\n            if (firstDv != digits[12])\n            {\n                IsValid = false;\n                ValidationErrorMessage = "Dígito verificador inválido";\n                return;\n            }\n\n            var temp = digits.Take(12).Append(firstDv);\n            int secondDv = CalculateDv(temp);\n            if (secondDv != digits[13])\n            {\n                IsValid = false;\n                ValidationErrorMessage = "Dígito verificador inválido";\n                return;\n            }\n\n            Value = value;\n            IsValid = true;\n        }\n\n        private int CalculateDv(IEnumerable<int> numbers)\n        {\n            var weights = new int[] { 2, 3, 4, 5, 6, 7, 8, 9 };\n            int index = 0;\n            int sum = 0;\n            foreach (var num in numbers.Reverse())\n            {\n                sum += num * weights[index];\n                index = (index + 1) % weights.Length;\n            }\n\n            int mod = sum % 11;\n            return mod < 2 ? 0 : 11 - mod;\n        }\n\n        public override string ToString() => Value;\n    }\n}\n