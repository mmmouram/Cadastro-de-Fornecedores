using Xunit;\nusing MyApp.Domain.ValueObjects;\n\nnamespace MyApp.Tests.Domain\n{\n    public class CnpjTests\n    {\n        [Theory]\n        [InlineData("12345678000195", true)]\n        [InlineData("1A3456780001B5", true)]\n        [InlineData("1A3456780001B4", false)]\n        [InlineData("12#45678!000195", false)]\n        [InlineData("123", false)]\n        public void Cnpj_Validation_VariousInputs(string input, bool expectedValid)\n        {\n            var cnpj = new Cnpj(input);\n            Assert.Equal(expectedValid, cnpj.IsValid);\n        }\n\n        [Fact]\n        public void Cnpj_MeiNumericProperty()\n        {\n            var numeric = new Cnpj("12345678000195");\n            Assert.True(numeric.IsNumeric);\n\n            var alpha = new Cnpj("1A3456780001B5");\n            Assert.False(alpha.IsNumeric);\n        }\n\n        [Fact]\n        public void Cnpj_InvalidFormatMessage()\n        {\n            var cnpj = new Cnpj("12#45678!000195");\n            Assert.False(cnpj.IsValid);\n            Assert.Equal("Formato de CNPJ inválido", cnpj.ValidationErrorMessage);\n        }\n\n        [Fact]\n        public void Cnpj_InvalidDvMessage()\n        {\n            var cnpj = new Cnpj("1A3456780001B4");\n            Assert.False(cnpj.IsValid);\n            Assert.Equal("Dígito verificador inválido", cnpj.ValidationErrorMessage);\n        }\n    }\n}\n