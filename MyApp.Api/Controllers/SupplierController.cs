using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing System.ComponentModel.DataAnnotations;\nusing MyApp.Application.Interfaces;\nusing MyApp.Api.Models.Requests;\nusing MyApp.Api.Models.Responses;\n\nnamespace MyApp.Api.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    public class SupplierController : ControllerBase\n    {\n        private readonly ISupplierService _service;\n\n        public SupplierController(ISupplierService service)\n        {\n            _service = service;\n        }\n\n        /// <summary>\n        /// Cria um novo fornecedor.\n        /// </summary>\n        [HttpPost]\n        public async Task<IActionResult> Create([FromBody] SupplierRequest request)\n        {\n            try\n            {\n                var dto = await _service.CreateAsync(request.Cnpj, request.TipoPessoa);\n                var response = new SupplierResponse\n                {\n                    Id = dto.Id,\n                    Cnpj = dto.Cnpj,\n                    TipoPessoa = dto.TipoPessoa\n                };\n                return CreatedAtAction(nameof(GetById), new { id = dto.Id }, response);\n            }\n            catch (ValidationException ex)\n            {\n                return BadRequest(ex.Message);\n            }\n        }\n\n        /// <summary>\n        /// Atualiza um fornecedor existente.\n        /// </summary>\n        [HttpPut("{id}")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] SupplierRequest request)\n        {\n            try\n            {\n                var dto = await _service.UpdateAsync(id, request.Cnpj, request.TipoPessoa);\n                if (dto == null)\n                    return NotFound();\n                var response = new SupplierResponse\n                {\n                    Id = dto.Id,\n                    Cnpj = dto.Cnpj,\n                    TipoPessoa = dto.TipoPessoa\n                };\n                return Ok(response);\n            }\n            catch (ValidationException ex)\n            {\n                return BadRequest(ex.Message);\n            }\n            catch (KeyNotFoundException)\n            {\n                return NotFound();\n            }\n        }\n\n        /// <summary>\n        /// Obt√©m um fornecedor por ID.\n        /// </summary>\n        [HttpGet("{id}")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var dto = await _service.GetByIdAsync(id);\n            if (dto == null)\n                return NotFound();\n            var response = new SupplierResponse\n            {\n                Id = dto.Id,\n                Cnpj = dto.Cnpj,\n                TipoPessoa = dto.TipoPessoa\n            };\n            return Ok(response);\n        }\n    }\n}\n