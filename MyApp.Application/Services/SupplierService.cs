using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MyApp.Application.Dtos;\nusing MyApp.Application.Interfaces;\nusing MyApp.Domain.Entities;\nusing MyApp.Domain.Enums;\nusing MyApp.Domain.Interfaces;\n\nnamespace MyApp.Application.Services\n{\n    public class SupplierService : ISupplierService\n    {\n        private readonly ISupplierRepository _repository;\n\n        public SupplierService(ISupplierRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<SupplierDto> CreateAsync(string cnpj, PersonType tipoPessoa)\n        {\n            var supplier = new Supplier(cnpj, tipoPessoa);\n            await _repository.AddAsync(supplier);\n            return new SupplierDto\n            {\n                Id = supplier.Id,\n                Cnpj = supplier.Cnpj,\n                TipoPessoa = supplier.TipoPessoa\n            };\n        }\n\n        public async Task<SupplierDto> UpdateAsync(Guid id, string cnpj, PersonType tipoPessoa)\n        {\n            var existing = await _repository.GetByIdAsync(id);\n            if (existing == null)\n                throw new KeyNotFoundException("Fornecedor n√£o encontrado");\n\n            existing.Update(cnpj, tipoPessoa);\n            await _repository.UpdateAsync(existing);\n\n            return new SupplierDto\n            {\n                Id = existing.Id,\n                Cnpj = existing.Cnpj,\n                TipoPessoa = existing.TipoPessoa\n            };\n        }\n\n        public async Task<SupplierDto> GetByIdAsync(Guid id)\n        {\n            var existing = await _repository.GetByIdAsync(id);\n            if (existing == null)\n                return null;\n\n            return new SupplierDto\n            {\n                Id = existing.Id,\n                Cnpj = existing.Cnpj,\n                TipoPessoa = existing.TipoPessoa\n            };\n        }\n    }\n}\n