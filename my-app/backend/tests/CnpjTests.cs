using Xunit;\nusing MyApp.Backend.ValueObjects;\nusing MyApp.Backend.Exceptions;\n\nnamespace MyApp.Backend.Tests\n{\n    public class CnpjTests\n    {\n        [Theory]\n        [InlineData(\"12345678000195\")]\n        [InlineData(\"1A3456780001B5\")]\n        public void Create_ValidCnpj_ReturnsCnpj(string input)\n        {\n            var cnpj = Cnpj.Create(input);\n            Assert.Equal(input.ToUpper(), cnpj.Value);\n        }\n\n        [Theory]\n        [InlineData(\"12345678000196\")]\n        [InlineData(\"1A3456780001B4\")]\n        public void Create_InvalidDv_ThrowsBadRequest(string input)\n        {\n            var ex = Assert.Throws<BadRequestException>(() => Cnpj.Create(input));\n            Assert.Equal(\"Dígito verificador inválido\", ex.Message);\n        }\n\n        [Theory]\n        [InlineData(\"12#45678!000195\")]\n        [InlineData(\"123\")]\n        [InlineData(\"\")]\n        public void Create_InvalidFormat_ThrowsBadRequest(string input)\n        {\n            var ex = Assert.Throws<BadRequestException>(() => Cnpj.Create(input));\n            Assert.Equal(\"Formato de CNPJ inválido\", ex.Message);\n        }\n    }\n}