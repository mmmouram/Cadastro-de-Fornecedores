using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Xunit;\nusing Moq;\nusing MyApp.Backend.Services;\nusing MyApp.Backend.Repositories;\nusing MyApp.Backend.DTOs;\nusing MyApp.Backend.Models;\nusing MyApp.Backend.ValueObjects;\nusing MyApp.Backend.Models.Enums;\nusing MyApp.Backend.Exceptions;\n\nnamespace MyApp.Backend.Tests\n{\n    public class SupplierServiceTests\n    {\n        private readonly Mock<ISupplierRepository> _repositoryMock;\n        private readonly SupplierService _service;\n\n        public SupplierServiceTests()\n        {\n            _repositoryMock = new Mock<ISupplierRepository>();\n            _service = new SupplierService(_repositoryMock.Object);\n        }\n\n        [Fact]\n        public async Task CreateAsync_MeiWithAlphanumeric_ThrowsBadRequest()\n        {\n            var request = new SupplierRequest\n            {\n                Name = \"Teste\",\n                Cnpj = \"1A3456780001B5\",\n                PersonType = PersonType.MEI\n            };\n\n            var ex = await Assert.ThrowsAsync<BadRequestException>(() => _service.CreateAsync(request));\n            Assert.Equal(\"MEI aceita somente CNPJ numÃ©rico\", ex.Message);\n        }\n\n        [Fact]\n        public async Task CreateAsync_ValidNumeric_CreatesSupplier()\n        {\n            var request = new SupplierRequest\n            {\n                Name = \"Teste\",\n                Cnpj = \"12345678000195\",\n                PersonType = PersonType.NORMAL\n            };\n\n            _repositoryMock.Setup(r => r.AddAsync(It.IsAny<Supplier>()))\n                .Returns(Task.CompletedTask);\n\n            var response = await _service.CreateAsync(request);\n\n            Assert.Equal(request.Name, response.Name);\n            Assert.Equal(request.Cnpj, response.Cnpj);\n            Assert.Equal(request.PersonType, response.PersonType);\n        }\n\n        [Fact]\n        public async Task CreateAsync_ValidAlphanumeric_CreatesSupplier()\n        {\n            var request = new SupplierRequest\n            {\n                Name = \"Teste\",\n                Cnpj = \"1A3456780001B5\",\n                PersonType = PersonType.NORMAL\n            };\n\n            _repositoryMock.Setup(r => r.AddAsync(It.IsAny<Supplier>()))\n                .Returns(Task.CompletedTask);\n\n            var response = await _service.CreateAsync(request);\n\n            Assert.Equal(request.Name, response.Name);\n            Assert.Equal(request.Cnpj, response.Cnpj);\n            Assert.Equal(request.PersonType, response.PersonType);\n        }\n\n        [Fact]\n        public async Task GetByIdAsync_NonExisting_ThrowsBadRequest()\n        {\n            _repositoryMock.Setup(r => r.GetByIdAsync(It.IsAny<Guid>()))\n                .ReturnsAsync((Supplier?)null);\n\n            await Assert.ThrowsAsync<BadRequestException>(() => _service.GetByIdAsync(Guid.NewGuid()));\n        }\n\n        [Fact]\n        public async Task GetByIdAsync_Existing_ReturnsResponse()\n        {\n            var supplier = new Supplier(\"Nome\", Cnpj.Create(\"12345678000195\"), PersonType.NORMAL);\n            _repositoryMock.Setup(r => r.GetByIdAsync(supplier.Id))\n                .ReturnsAsync(supplier);\n\n            var response = await _service.GetByIdAsync(supplier.Id);\n            Assert.Equal(supplier.Id, response.Id);\n            Assert.Equal(supplier.Name, response.Name);\n            Assert.Equal(supplier.Cnpj.Value, response.Cnpj);\n        }\n\n        [Fact]\n        public async Task ListAsync_ReturnsAll()\n        {\n            var suppliers = new List<Supplier>\n            {\n                new Supplier(\"Nome1\", Cnpj.Create(\"12345678000195\"), PersonType.NORMAL),\n                new Supplier(\"Nome2\", Cnpj.Create(\"1A3456780001B5\"), PersonType.NORMAL),\n            };\n            _repositoryMock.Setup(r => r.ListAsync()).ReturnsAsync(suppliers);\n\n            var result = await _service.ListAsync();\n            Assert.Collection(result,\n                item => Assert.Equal(\"12345678000195\", item.Cnpj),\n                item => Assert.Equal(\"1A3456780001B5\", item.Cnpj));\n        }\n    }\n}