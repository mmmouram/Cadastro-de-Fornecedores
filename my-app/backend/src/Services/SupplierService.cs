using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MyApp.Backend.DTOs;\nusing MyApp.Backend.Models;\nusing MyApp.Backend.Models.Enums;\nusing MyApp.Backend.Repositories;\nusing MyApp.Backend.ValueObjects;\nusing MyApp.Backend.Exceptions;\n\nnamespace MyApp.Backend.Services\n{\n    public class SupplierService : ISupplierService\n    {\n        private readonly ISupplierRepository _repository;\n\n        public SupplierService(ISupplierRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<SupplierResponse> CreateAsync(SupplierRequest request)\n        {\n            if (request.PersonType == PersonType.MEI && request.Cnpj.Any(char.IsLetter))\n                throw new BadRequestException(\"MEI aceita somente CNPJ numérico\");\n\n            var cnpj = Cnpj.Create(request.Cnpj);\n            var supplier = new Supplier(request.Name, cnpj, request.PersonType);\n\n            await _repository.AddAsync(supplier);\n\n            return MapToResponse(supplier);\n        }\n\n        public async Task<SupplierResponse> UpdateAsync(Guid id, SupplierRequest request)\n        {\n            var existing = await _repository.GetByIdAsync(id);\n            if (existing == null)\n                throw new BadRequestException(\"Fornecedor não encontrado\");\n\n            if (request.PersonType == PersonType.MEI && request.Cnpj.Any(char.IsLetter))\n                throw new BadRequestException(\"MEI aceita somente CNPJ numérico\");\n\n            var cnpj = Cnpj.Create(request.Cnpj);\n            existing.Update(request.Name, cnpj, request.PersonType);\n\n            await _repository.UpdateAsync(existing);\n\n            return MapToResponse(existing);\n        }\n\n        public async Task<SupplierResponse> GetByIdAsync(Guid id)\n        {\n            var supplier = await _repository.GetByIdAsync(id);\n            if (supplier == null)\n                throw new BadRequestException(\"Fornecedor não encontrado\");\n\n            return MapToResponse(supplier);\n        }\n\n        public async Task<IEnumerable<SupplierResponse>> ListAsync()\n        {\n            var suppliers = await _repository.ListAsync();\n            return suppliers.Select(MapToResponse);\n        }\n\n        private SupplierResponse MapToResponse(Supplier supplier)\n        {\n            return new SupplierResponse\n            {\n                Id = supplier.Id,\n                Name = supplier.Name,\n                Cnpj = supplier.Cnpj.ToString(),\n                PersonType = supplier.PersonType\n            };\n        }\n    }\n}