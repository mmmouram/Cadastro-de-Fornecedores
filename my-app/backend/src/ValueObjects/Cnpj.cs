using System;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing MyApp.Backend.Exceptions;\n\nnamespace MyApp.Backend.ValueObjects\n{\n    public class Cnpj\n    {\n        public string Value { get; }\n\n        private Cnpj(string value)\n        {\n            Value = value;\n        }\n\n        public static Cnpj Create(string cnpjInput)\n        {\n            if (string.IsNullOrWhiteSpace(cnpjInput))\n                throw new BadRequestException(\"Formato de CNPJ inválido\");\n\n            var cnpj = cnpjInput.Trim().ToUpper();\n            if (cnpj.Length != 14)\n                throw new BadRequestException(\"Formato de CNPJ inválido\");\n\n            if (!Regex.IsMatch(cnpj, \"^[0-9A-Z]{14}$\"))\n                throw new BadRequestException(\"Formato de CNPJ inválido\");\n\n            if (!IsValid(cnpj))\n                throw new BadRequestException(\"Dígito verificador inválido\");\n\n            return new Cnpj(cnpj);\n        }\n\n        private static bool IsValid(string cnpj)\n        {\n            var numbers = cnpj.ToCharArray().Select(c => MapCharToInt(c)).ToArray();\n            var dv1 = CalculateDigit(numbers, 12);\n            var dv2 = CalculateDigit(numbers, 13);\n\n            return numbers[12] == dv1 && numbers[13] == dv2;\n        }\n\n        private static int CalculateDigit(int[] numbers, int position)\n        {\n            int[] weights;\n            if (position == 12)\n            {\n                weights = new int[] {5,4,3,2,9,8,7,6,5,4,3,2};\n            }\n            else\n            {\n                weights = new int[] {6,5,4,3,2,9,8,7,6,5,4,3,2};\n            }\n\n            int sum = 0;\n            for(int i=0; i<weights.Length; i++)\n            {\n                sum += numbers[i] * weights[i];\n            }\n            var mod = sum % 11;\n            return mod < 2 ? 0 : 11 - mod;\n        }\n\n        private static int MapCharToInt(char c)\n        {\n            if (char.IsDigit(c))\n                return c - '0';\n\n            if (c >= 'A' && c <= 'Z')\n                return c - 48;\n\n            throw new BadRequestException(\"Formato de CNPJ inválido\");\n        }\n\n        public override string ToString() => Value;\n    }\n}